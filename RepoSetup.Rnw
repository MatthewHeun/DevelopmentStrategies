\documentclass{article}

\usepackage{graphicx}			% Provides graphics utilities
\graphicspath{ {figures/} }		% Sets graphics path
\usepackage{pdfpages}   		% Allows pdfs to be inserte into this document
\usepackage[hyphens]{url}		% Breaks long URLs across lines

% Load last
\usepackage{hyperref}			% Makes hyperlinks in .pdf output


\bibliographystyle{abbrv}

\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{Repo Setup Strategy}
\author{Matthew Kuperus Heun}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\maketitle


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{abstract}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This document gives my strategy for setting up repositories for
\texttt{R} pacage development.
It provides several reminders for important aspects of the setup process.
\end{abstract}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
\label{sec:introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\texttt{R} packages are a great way to bundle related functions together.
Development of \texttt{R} packages is greatly assisted by
continuous integration (CI) and other development strategies.

But setting up a repository for CI can be difficult.
Further complicating matters, setting up a repository is done rarely,
so some of the steps are easy to forget.

This document provides reminders of the steps
and best practices for the setup process.
Consulting this document will speed the setup process
and reduce time spent searching for nuances of the setup process.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Rules}
\label{sec:rules}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{enumerate}

  \item Unit testing is essential for providing confidence in package functionality over time.

  \item Packages should never drop below 100\% unit testing code coverage.

  \item Unit testing should be done for every commit on the \texttt{main} and \texttt{develop}
        branches.

  \item Unit testing should be done nightly.

  \item Spelling is important.

  \item Spell checking should be done as a regular part of code testing.

\end{enumerate}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Initialization}
\label{sec:initialiation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{itemize}

  \item \verb|usethis::create_package("~/github/<<pkg_dir>>/")| to create an R package.

  \item \verb|usethis::use_readme_rmd()| to create the \verb|README.Rmd| page

  \item \verb|usethis::use_roxygen_md()| to allow markdown in roxygen documentation.

  \item \verb|usethis::use_spell_check()| to set up automated spell checking.

  \item For packages whose vignettes build fine in any location,
        say \verb|usethis::use_pkgdown_github_pages()|.
  		  Remember to turn on GitHub pages at the \url{github.com} page for the repository.
		    Update the file \verb|_pkgdown.yaml| to include \verb|bootswatch: simplex|.

  \item For packages whose vignettes require resources only available
        on my local computer, deploy from the \verb|/docs| directory.

        \begin{itemize}

          \item \verb|usethis::use_github_pages(branch = "main", path = "/docs")|

          \item Navigate to the ``Pages'' portion of the package's settings:
                (a) set to ``Deploy from branch'',
                (b) set to ``main'' or ``master'', and
                (c) set to ``/docs''.

        \end{itemize}

  \item If the package was formerly set to deploy from
        the \verb|/| directory of the \verb|gh-pages| branch,
        be sure to remove the "docs" line from \verb|.gitignore|.

\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Setup for testing}
\label{sec:testing_setup}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Set up the package for testing with

\begin{itemize}

  \item \verb|usethis::use_testthat()|

\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Setup for continuous integration}
\label{sec:ci_setup}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The \texttt{R} community has settled on GitHub Actions for continuous integration testing.
To set up a repository for GitHub Actions CI testing in four tese environments
(macOS-latest, windows-latest, ubuntu-latest, and ubuntu-devel),
do the following:
%
\begin{itemize}

  \item Use
  		\begin{verbatim}
			usethis::use_github_action()
  	 	\end{verbatim}
		and choose \verb|check-standard| to set up for tests.

  \item Use
  		\begin{verbatim}
			usethis::use_github_action()
  	 	\end{verbatim}
		and choose \verb|test-coverage| to set up for test coverage with \verb|codecov|.

  \item Add
  		\begin{verbatim}
			- develop
		\end{verbatim}
		to the list of branches in the file \texttt{.github/R-CMD-check.yaml}.

  \item Add nightly builds with
  		\begin{verbatim}
			schedule:
			  # Build main branch daily at 7 AM UTC, 2 AM EST, 3 AM EDT.
			  - cron: "0 7 * * *"
		\end{verbatim}
	    to the \texttt{on:} section of \texttt{.github/R-CMD-check.yaml}.\

  \item To build repositories that depend on packages that are outside of \texttt{CRAN},
		Add lines like this
	    \begin{verbatim}
        extra-packages: any::rcmdcheck, github::MatthewHeun/<<Name of package>>, EnergyEconomyDecoupling/<<Name of package>>
			\end{verbatim}
		to the \\
		\texttt{
		jobs: \\
      R-CMD-check:\\
        steps:\\
          - uses: r-lib/actions/setup-r-dependencies@v2\\
            with:\\
              extra-packages:}
    section of
		\texttt{.github/R-CMD-check.yaml}.

\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Set up for code coverage}
\label{sec:codecov_setup}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Set up for code coverage reporting by doing the following:
%
\begin{itemize}

  \item Go to \url{https://codecov.io}, log in, click \verb|x Repositories| and add
  		the new repository to the list of repositories for code coverage.

  \item Say \verb|usethis::use_coverage()| to set up code coverage
		for the package with \url{https://codecov.io}.

  \item Use
  		\begin{verbatim}
			usethis::use_github_action("test-coverage")
		\end{verbatim}
		to create the \verb|.github/test-coverage.yaml| file in the repository.
		This file creates the GitHub Action for
		uploading code coverage results to \url{https://codecov.io}.

  \item Eliminate any branches besides \texttt{main} or \texttt{master}
  		in the \verb|.github/test-coverage.yaml| file.

  \item To do nightly code coverage checks, add
  		\begin{verbatim}
			schedule:
				  # Build main daily at 8 AM UTC, 3 AM EST, 4 AM EDT, one hour after nightly builds.
				  - cron: "0 8 * * *"
  		\end{verbatim}
		to the \texttt{on:} section of \verb|.github/test-coverage.yaml|

  \item To build repositories that depend on packages that are outside of \texttt{CRAN},
		Add lines like this
	        \begin{verbatim}
				remotes::install_github("MatthewHeun/name_of_repository")
			\end{verbatim}
		to the \texttt{Install dependencies} section of
		\texttt{.github/test-coverage.yaml}.

\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Badges}
\label{sec:badges}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Set up badges for the README.Rmd page with the following:

\begin{itemize}

  \item \verb|usethis::use_cran_badge()|

  \item \verb|usethis::use_lifecycle_badge()|

  \item markdown text for the \verb|R-CMD-check passing| badge from the setup for testing step.

\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Guidelines}
\label{sec:guidelines}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Add files with community and contribution guidelines to the package.

\begin{itemize}

  \item Add \verb|CONTRIBUTING.Rmd| to the \verb|.github| directory.

  \item Add \verb|CODE_OF_CONDUCT.md| to the \verb|.github| directory.

\end{itemize}
%
See previous packages (such as \verb|RCLabels|) for examples.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Conclusion}
\label{sec:conclusion}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The strategies discussed above will greatly assist the setup of any repository
for \texttt{R} package development.




% \bibliography{references}


\end{document}
